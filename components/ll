import React, { useState } from 'react';

import Cookies from 'js-cookie';
import { useRouter } from 'next/router';

import { Button } from '@material-tailwind/react/components/Button';
import { Input } from '@material-tailwind/react/components/Input';

import customAxios from '../../https/customAxios';

const AuthForm = () => {
  const router = useRouter();
  const [authTab, setAuthTab] = useState('login');
  const [loginTap, setLoginTap] = useState(0);
  const [signupTap, setSignupTap] = useState(0);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [usernameRegister, setUsernameRegister] = useState('');
  const [loginInput, setLoginInput] = useState(false);
  const [registerInput, setRegisterInput] = useState(false);
  const activeClass =
    'border-b-2 bord er-blue-900  font-bold text-blue-900 py-3';

  const [otp01, setOtp01] = useState<any>();
  const [otp02, setOtp02] = useState<any>();
  const [otp03, setOtp03] = useState<any>();
  const [otp04, setOtp04] = useState<any>();
  const [otp05, setOtp05] = useState<any>();
  const [otp06, setOtp06] = useState<any>();
  const [validatePassword, setvalidatePassword] = useState(true);
  const [forgotPassword, setForgotPassword] = useState('');
  const [forgotInput, setForgotInput] = useState(false);

  const changeSignup = () => {
    setAuthTab('signup');
  };
  const changeLogin = () => {
    setAuthTab('login');
  };
  let Authorization = Cookies.get('Authorization');

  const handleloginUser = async (e: any) => {
    e.preventDefault();
    if (username === '' || password === '') {
      setLoginInput(true);
      setUsername('');
      setPassword('');
      return;
    }

    let username1 = '';
    if (username[0] === '0') {
      username1 = username.substring(1);
      username1 = `+855${username1}`;
    } else {
      username1 = `+855${username}`;
    }
    const datas = { username: username1, password };
    const req = await customAxios.post(
      '/api/method/dipmarts_app.api.login',
      datas
    );
    if (req?.request?.status === 404) {
      setUsername('');
      setPassword('');
      setLoginInput(true);
      return;
    }
    const userProfile = async () => {
      await customAxios
        .get('https://dev.dipmart.com/api/method/dipmarts_app.api.userprofile')
        .then((res) => {
          const userprofile = res.data.message;
          Cookies.set('UserProfile', JSON.stringify(userprofile));
        });
    };
    const api_key = req.data.message.api_key;
    const api_secret = req.data.message.api_secret;
    Authorization = `Token ${api_key}:${api_secret}`;
    Cookies.set('Authorization', Authorization);
    userProfile();
    if (req.status === 200) {
      router.reload();
      router.push('/profile');
    }
  };

  let counter = 60;
  let interval = setInterval(function () {
    counter--;
    if (counter <= 0) {
      clearInterval(interval);
      return;
    }
  }, 1000);

  let RegisterUsername = '';
  if (usernameRegister[0] === '0') {
    RegisterUsername = usernameRegister.substring(1);
    RegisterUsername = `+855${RegisterUsername}`;
  } else {
    RegisterUsername = `+855${usernameRegister}`;
  }
  let ForgotPasswordUsername = '';
  if (forgotPassword[0] === '0') {
    ForgotPasswordUsername = forgotPassword.substring(1);
    ForgotPasswordUsername = `+855${ForgotPasswordUsername}`;
  } else {
    ForgotPasswordUsername = `+855${forgotPassword}`;
  }
  const handleSignup = async (e: any) => {
    e.preventDefault();
    if (usernameRegister.length < 8 || usernameRegister.length > 10) {
      setRegisterInput(true);
      return;
    }
    const req = await customAxios.post('/api/method/dipmarts_app.api.getotp', {
      phone: RegisterUsername,
    });
    if (req.status === 200) {
      setSignupTap(1);
      setPassword('');
    }
  };
  const confirmOtp = async (e: any) => {
    e.preventDefault();
    if (
      otp01 === '' ||
      otp02 === '' ||
      otp03 === '' ||
      otp04 === '' ||
      otp05 === '' ||
      otp06 === ''
    ) {
      return;
    }
    let otp = otp01 + otp02 + otp03 + otp04 + otp05 + otp06;
    const datas = {
      phone: RegisterUsername,
      otp,
    };

    const otpvalidation = await customAxios.post(
      '/api/method/dipmarts_app.api.validotp',
      datas
    );
    if (otpvalidation.status === 200) {
      setSignupTap(2);
    } else {
      setOtp01(null);
      setOtp02(null);
      setOtp03(null);
      setOtp04(null);
      setOtp05(null);
      setOtp06(null);
      setSignupTap(0);
    }
  };
  const confirmSignup = async () => {
    if (password.length < 8) {
      setvalidatePassword(true);
      return;
    }
    const datas = {
      username: RegisterUsername,
      password,
    };
    const req = await customAxios.post(
      '/api/method/dipmarts_app.api.signup',
      datas
    );
    if (req.status === 200) {
      setAuthTab('login');
    }
  };
  const tabChange = function (val: any) {
    let ele = document.querySelectorAll('input');
    if (ele[val - 1].value != '') {
      if (val !== 6) {
        ele[val].focus();
      }
    } else if (ele[val - 1].value == '') {
      if (val !== 1) {
        ele[val - 2].focus();
      }
    }
  };

  const ForgetPassword = async (e: any) => {
    e.preventDefault();
    if (ForgotPasswordUsername.length <= 8) {
      setForgotInput(true);
      return;
    }
    const req = await customAxios.post('/api/method/dipmarts_app.api.getotp', {
      phone: ForgotPasswordUsername,
    });
    if (req.status === 200) {
      setLoginTap(2);
    } else {
      setForgotInput(true);
    }
  };
  const confirmOtpResetpw = async (e: any) => {
    e.preventDefault();
    if (
      otp01 === '' ||
      otp02 === '' ||
      otp03 === '' ||
      otp04 === '' ||
      otp05 === '' ||
      otp06 === ''
    ) {
      return;
    }
    let otp = otp01 + otp02 + otp03 + otp04 + otp05 + otp06;
    const datas = {
      phone: ForgotPasswordUsername,
      otp,
    };

    const otpvalidation = await customAxios.post(
      '/api/method/dipmarts_app.api.validotp',
      datas
    );
    if (otpvalidation.status === 200) {
      setLoginTap(3);
    } else {
      setOtp01(null);
      setOtp02(null);
      setOtp03(null);
      setOtp04(null);
      setOtp05(null);
      setOtp06(null);
      setLoginTap(1);
    }
  };
  const changePassword = async () => {
    if (password.length < 8) {
      setvalidatePassword(true);
      return;
    }
    const datas = {
      username: ForgotPasswordUsername,
      password,
    };
    const res = await customAxios.post(
      '/api/method/dipmarts_app.api.forgetpassword',
      datas
    );
    if (res.status === 200) {
      setLoginTap(0);
      setPassword('');
    } else {
      setvalidatePassword(true);
      setPassword('');
    }
  };

  return (
    <div className="absolute bottom-0 w-full z-50">
      <div className="grid grid-cols-2 text-center bg-white rounded-t-xl  border-b-2  text-base">
        <button
          className={authTab === 'signup' ? activeClass : 'py-3'}
          onClick={changeSignup}
          name="signuptap"
        >
          Sign Up
        </button>
        <button
          className={authTab === 'login' ? activeClass : 'py-3'}
          onClick={changeLogin}
          name="signintap"
        >
          Login
        </button>
      </div>
      {authTab === 'login' ? (
        <div className="bg-white p-4 rounded-b-xl pb-12">
          {loginTap === 0 && (
            <div className="bg-white p-4 rounded-b-xl">
              <form
                className="grid grid-row-4 gap-4"
                onSubmit={handleloginUser}
              >
                <div className="flex gap-1">
                  <span className="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 rounded-md border border-r-0 border-gray-300 dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
                    +855
                  </span>

                  <Input
                    label="Phone Number"
                    type={'number'}
                    value={username}
                    onChange={(e) => {
                      setUsername(e.target.value);
                      setLoginInput(false);
                    }}
                    error={loginInput}
                  />
                </div>
                <Input
                  label="Password"
                  type={'password'}
                  value={password}
                  onChange={(e) => {
                    setPassword(e.target.value);
                    setLoginInput(false);
                  }}
                  error={loginInput}
                />
                <p
                  onClick={() => setLoginTap(1)}
                  className="underline text-xs text-blue-800"
                >
                  Forgot password?
                </p>
                <Button name="login" type="submit">
                  Login
                </Button>
              </form>
            </div>
          )}
          {loginTap === 1 && (
            <>
              <h1 className="font-semibold text-center">Forgot Password</h1>
              <div className="bg-white p-4 rounded-b-xl">
                <form
                  onSubmit={ForgetPassword}
                  className="grid grid-row-4 gap-4"
                >
                  <h1 className="text-xs font-semibold">
                    Please enter your phone number to continue
                  </h1>
                  <div className="flex gap-1 my-3">
                    <span className="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 rounded-md border border-r-0 border-gray-300 dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
                      +855
                    </span>
                    <Input
                      label="Phone Number"
                      type={'number'}
                      value={forgotPassword}
                      onChange={(e) => setForgotPassword(e.target.value)}
                      error={forgotInput}
                    />
                  </div>
                  <Button name="forgotpassword" type="submit">
                    Continue
                  </Button>
                </form>
              </div>
            </>
          )}
          {loginTap === 2 ? (
            <form
              className="grid grid-row-4 gap-4"
              onSubmit={confirmOtpResetpw}
            >
              <div className="px-[20px]">
                <div className="pt-3 bg-white mb-[10px]">
                  <h1 className="font-bold text-[18px]">Phone Verifcation</h1>
                  <span className="text-xs text-gray-400">
                    Enter code sent to your phone
                  </span>
                  <div className="grid grid-cols-6 pt-5 pb-2 gap-2">
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp01}
                      onChange={(e) => setOtp01(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(1)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp02}
                      onChange={(e) => setOtp02(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(2)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp03}
                      onChange={(e) => setOtp03(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(3)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp04}
                      onChange={(e) => setOtp04(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(4)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp05}
                      onChange={(e) => setOtp05(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(5)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp06}
                      onChange={(e) => setOtp06(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(6)}
                      maxLength={1}
                    />
                  </div>
                </div>

                <span className="text-sm text-[#2B2F7E]">
                  Resend code in: <span className="text-blue-600">59sec</span>
                </span>
                <button
                  className="w-full py-4 bg-blue-900 text-center font-bold text-[14px] text-white rounded-lg mt-[20px]"
                  type="submit"
                  name="confirmOtpResetpw"
                >
                  Countinue
                </button>
              </div>
            </form>
          ) : null}
          {loginTap === 3 ? (
            <div>
              <div className="w-full flex justify-center my-5">
                <svg
                  width="142"
                  height="142"
                  viewBox="0 0 142 142"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g filter="url(#filter0_d_2_2)">
                    <rect
                      x="30"
                      y="20"
                      width="82"
                      height="82"
                      rx="41"
                      fill="#32B768"
                    />
                  </g>
                  <path
                    d="M58.4722 61.5695L67.2037 70.1112L84.6667 53.0278"
                    stroke="white"
                    strokeWidth="6"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <defs>
                    <filter
                      id="filter0_d_2_2"
                      x="0"
                      y="0"
                      width="142"
                      height="142"
                      filterUnits="userSpaceOnUse"
                      colorInterpolationFilters="sRGB"
                    >
                      <feFlood floodOpacity="0" result="BackgroundImageFix" />
                      <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                      />
                      <feOffset dy="10" />
                      <feGaussianBlur stdDeviation="15" />
                      <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0.25098 0 0 0 0 0.74902 0 0 0 0 1 0 0 0 0.24 0"
                      />
                      <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_2_2"
                      />
                      <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_2_2"
                        result="shape"
                      />
                    </filter>
                  </defs>
                </svg>
              </div>
              <small className="text-sm opacity-50 flex justify-center my-4">
                You Phone number has been successfully verified
              </small>
              <div className="w-full justify-center flex ">
                <button
                  className="w-full bg-blue-900 text-white py-3 mx-2 rounded-xl font-bold"
                  type="button"
                  onClick={() => setLoginTap(4)}
                  name="completeRequest"
                >
                  Continue
                </button>
              </div>
            </div>
          ) : null}
          {loginTap === 4 ? (
            <div>
              <h1 className="mb-4 text-lg font-bold">Create new Password</h1>
              <Input
                type="text"
                label="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                error={validatePassword}
              />
              <div className="text-sm my-4">
                <p>Must have 5-18 characters</p>
                <p>Must have at least 1 number & 1 letter</p>
                <p>Must not have spaces</p>
              </div>
              <div className="w-full justify-center flex ">
                <button
                  className="w-full bg-blue-900 text-white py-3 mx-2 rounded-xl font-bold"
                  type="button"
                  onClick={changePassword}
                  name="changePassword"
                >
                  Continue
                </button>
              </div>
            </div>
          ) : null}
        </div>
      ) : (
        <div className="bg-white p-4 rounded-b-xl pb-14">
          {signupTap === 0 ? (
            <form onSubmit={handleSignup} className="grid grid-row-4 gap-4">
              <h1 className="text-xs font-semibold">
                Register with Phone Number
              </h1>
              <div className="flex gap-1 my-3">
                <span className="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 rounded-md border border-r-0 border-gray-300 dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
                  +855
                </span>
                <Input
                  label="Phone Number"
                  type={'number'}
                  value={usernameRegister}
                  onChange={(e) => setUsernameRegister(e.target.value)}
                  error={registerInput}
                />
              </div>
              <Button name="register" type="submit">
                Continue
              </Button>
            </form>
          ) : null}
          {signupTap === 1 ? (
            <form className="grid grid-row-4 gap-4" onSubmit={confirmOtp}>
              <div className="px-[20px]">
                <div className="pt-3 bg-white mb-[10px]">
                  <h1 className="font-bold text-[18px]">Phone Verifcation</h1>
                  <span className="text-xs text-gray-400">
                    Enter code sent to your phone
                  </span>
                  <div className="grid grid-cols-6 pt-5 pb-2 gap-2">
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp01}
                      onChange={(e) => setOtp01(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(1)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp02}
                      onChange={(e) => setOtp02(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(2)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp03}
                      onChange={(e) => setOtp03(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(3)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp04}
                      onChange={(e) => setOtp04(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(4)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp05}
                      onChange={(e) => setOtp05(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(5)}
                      maxLength={1}
                    />
                    <input
                      required
                      className="p-2 bg-blue-gray-50 text-center"
                      type="number"
                      value={otp06}
                      onChange={(e) => setOtp06(e.target.value.slice(0, 1))}
                      onKeyUp={() => tabChange(6)}
                      maxLength={1}
                    />
                  </div>
                </div>

                <span className="text-sm text-[#2B2F7E]">
                  Resend code in: <span className="text-blue-600">59sec</span>
                </span>
                <button
                  className="w-full py-4 bg-blue-900 text-center font-bold text-[14px] text-white rounded-lg mt-[20px]"
                  type="submit"
                  name="submitotp"
                >
                  Countinue
                </button>
              </div>
            </form>
          ) : null}
          {signupTap === 2 ? (
            <div>
              <div className="w-full flex justify-center my-5">
                <svg
                  width="142"
                  height="142"
                  viewBox="0 0 142 142"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g filter="url(#filter0_d_2_2)">
                    <rect
                      x="30"
                      y="20"
                      width="82"
                      height="82"
                      rx="41"
                      fill="#32B768"
                    />
                  </g>
                  <path
                    d="M58.4722 61.5695L67.2037 70.1112L84.6667 53.0278"
                    stroke="white"
                    strokeWidth="6"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <defs>
                    <filter
                      id="filter0_d_2_2"
                      x="0"
                      y="0"
                      width="142"
                      height="142"
                      filterUnits="userSpaceOnUse"
                      colorInterpolationFilters="sRGB"
                    >
                      <feFlood floodOpacity="0" result="BackgroundImageFix" />
                      <feColorMatrix
                        in="SourceAlpha"
                        type="matrix"
                        values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                        result="hardAlpha"
                      />
                      <feOffset dy="10" />
                      <feGaussianBlur stdDeviation="15" />
                      <feColorMatrix
                        type="matrix"
                        values="0 0 0 0 0.25098 0 0 0 0 0.74902 0 0 0 0 1 0 0 0 0.24 0"
                      />
                      <feBlend
                        mode="normal"
                        in2="BackgroundImageFix"
                        result="effect1_dropShadow_2_2"
                      />
                      <feBlend
                        mode="normal"
                        in="SourceGraphic"
                        in2="effect1_dropShadow_2_2"
                        result="shape"
                      />
                    </filter>
                  </defs>
                </svg>
              </div>
              <small className="text-sm opacity-50 flex justify-center my-4">
                You Phone number has been successfully verified
              </small>
              <div className="w-full justify-center flex ">
                <button
                  className="w-full bg-blue-900 text-white py-3 mx-2 rounded-xl font-bold"
                  type="button"
                  onClick={() => setSignupTap(3)}
                  name="CompleteSignup"
                >
                  Continue
                </button>
              </div>
            </div>
          ) : null}
          {signupTap === 3 ? (
            <div>
              <h1 className="mb-4 text-lg font-bold">Create Password</h1>
              <Input
                type="text"
                label="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                error={validatePassword}
              />
              <div className="text-sm my-4">
                <p>Must have 5-18 characters</p>
                <p>Must have at least 1 number & 1 letter</p>
                <p>Must not have spaces</p>
              </div>
              <div className="w-full justify-center flex ">
                <button
                  className="w-full bg-blue-900 text-white py-3 mx-2 rounded-xl font-bold"
                  type="button"
                  onClick={confirmSignup}
                  name="confirmSignup"
                >
                  Continue
                </button>
              </div>
            </div>
          ) : null}
        </div>
      )}
    </div>
